import React, { useState, useEffect } from "react"
import { motion } from "framer-motion"
import {
  Typography,
  Button,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Snackbar,
} from "@mui/material"
import { PlusCircle, Edit, Trash2 } from "lucide-react"
import axios from "axios"

const API_BASE_URL = "/api/v1/student"

export const StudentManagement = () => {
  const [students, setStudents] = useState([])
  const [isAddStudentModalOpen, setIsAddStudentModalOpen] = useState(false)
  const [isEditStudentModalOpen, setIsEditStudentModalOpen] = useState(false)
  const [newStudent, setNewStudent] = useState({
    registerNumber: "",
    fullName: "",
    email: "",
    phoneNumber: "",
    password: "",
    semester: "",
    branch: "",
    gender: "",
  })
  const [editingStudent, setEditingStudent] = useState(null)
  const [snackbar, setSnackbar] = useState({ open: false, message: "" })
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [currentUser, setCurrentUser] = useState(null)

  useEffect(() => {
    checkLoginStatus()
  }, [])

  const checkLoginStatus = async () => {
    try {
      const response = await axios.post(`${API_BASE_URL}/me`, {}, { withCredentials: true })
      setIsLoggedIn(true)
      setCurrentUser(response.data.data)
    } catch (error) {
      setIsLoggedIn(false)
      setCurrentUser(null)
    }
  }

  const handleLogin = async (registerNumber, password) => {
    try {
      const response = await axios.post(
        `${API_BASE_URL}/login`,
        { registerNumber, password },
        { withCredentials: true },
      )
      setIsLoggedIn(true)
      setCurrentUser(response.data.data.user)
      setSnackbar({ open: true, message: "Login successful" })
    } catch (error) {
      setSnackbar({ open: true, message: "Login failed: " + error.response.data.message })
    }
  }

  const handleLogout = async () => {
    try {
      await axios.post(`${API_BASE_URL}/logout`, {}, { withCredentials: true })
      setIsLoggedIn(false)
      setCurrentUser(null)
      setSnackbar({ open: true, message: "Logout successful" })
    } catch (error) {
      setSnackbar({ open: true, message: "Logout failed: " + error.response.data.message })
    }
  }

  const handleAddStudent = async () => {
    try {
      const formData = new FormData()
      Object.keys(newStudent).forEach((key) => formData.append(key, newStudent[key]))
      formData.append("profile", newStudent.profile)

      const response = await axios.post(`${API_BASE_URL}/register`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      })

      setStudents([...students, response.data.data])
      setIsAddStudentModalOpen(false)
      setNewStudent({
        registerNumber: "",
        fullName: "",
        email: "",
        phoneNumber: "",
        password: "",
        semester: "",
        branch: "",
        gender: "",
      })
      setSnackbar({ open: true, message: "Student added successfully" })
    } catch (error) {
      setSnackbar({ open: true, message: "Failed to add student: " + error.response.data.message })
    }
  }

  const handleEditStudent = (student) => {
    setEditingStudent(student)
    setIsEditStudentModalOpen(true)
  }

  const handleUpdateStudent = async () => {
    try {
      const response = await axios.put(`${API_BASE_URL}/${editingStudent._id}`, editingStudent, {
        withCredentials: true,
      })
      setStudents(students.map((s) => (s._id === editingStudent._id ? response.data.data : s)))
      setIsEditStudentModalOpen(false)
      setEditingStudent(null)
      setSnackbar({ open: true, message: "Student updated successfully" })
    } catch (error) {
      setSnackbar({ open: true, message: "Failed to update student: " + error.response.data.message })
    }
  }

  const handleDeleteStudent = async (id) => {
    try {
      await axios.delete(`${API_BASE_URL}/${id}`, { withCredentials: true })
      setStudents(students.filter((s) => s._id !== id))
      setSnackbar({ open: true, message: "Student deleted successfully" })
    } catch (error) {
      setSnackbar({ open: true, message: "Failed to delete student: " + error.response.data.message })
    }
  }

  return (
    <motion.div
      className="p-6 space-y-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex justify-between items-center">
        <Typography variant="h5">Student Management</Typography>
        {isLoggedIn ? (
          <Button variant="contained" onClick={handleLogout}>
            Logout
          </Button>
        ) : (
          <Button variant="contained" onClick={() => setIsAddStudentModalOpen(true)}>
            Login
          </Button>
        )}
      </div>

      {isLoggedIn && (
        <>
          <Button variant="contained" startIcon={<PlusCircle />} onClick={() => setIsAddStudentModalOpen(true)}>
            Add Student
          </Button>

          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Register Number</TableCell>
                  <TableCell>Full Name</TableCell>
                  <TableCell>Email</TableCell>
                  <TableCell>Phone Number</TableCell>
                  <TableCell>Semester</TableCell>
                  <TableCell>Branch</TableCell>
                  <TableCell>Gender</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {students.map((student) => (
                  <TableRow key={student._id} hover>
                    <TableCell>{student.registerNumber}</TableCell>
                    <TableCell>{student.fullName}</TableCell>
                    <TableCell>{student.email}</TableCell>
                    <TableCell>{student.phoneNumber}</TableCell>
                    <TableCell>{student.semester}</TableCell>
                    <TableCell>{student.branch}</TableCell>
                    <TableCell>{student.gender}</TableCell>
                    <TableCell>
                      <IconButton size="small" onClick={() => handleEditStudent(student)}>
                        <Edit />
                      </IconButton>
                      <IconButton size="small" onClick={() => handleDeleteStudent(student._id)}>
                        <Trash2 />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </>
      )}

      <Dialog open={isAddStudentModalOpen} onClose={() => setIsAddStudentModalOpen(false)}>
        <DialogTitle>{isLoggedIn ? "Add New Student" : "Login"}</DialogTitle>
        <DialogContent>
          {isLoggedIn ? (
            <>
              <TextField
                autoFocus
                margin="dense"
                label="Register Number"
                fullWidth
                value={newStudent.registerNumber}
                onChange={(e) => setNewStudent({ ...newStudent, registerNumber: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Full Name"
                fullWidth
                value={newStudent.fullName}
                onChange={(e) => setNewStudent({ ...newStudent, fullName: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Email"
                type="email"
                fullWidth
                value={newStudent.email}
                onChange={(e) => setNewStudent({ ...newStudent, email: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Phone Number"
                fullWidth
                value={newStudent.phoneNumber}
                onChange={(e) => setNewStudent({ ...newStudent, phoneNumber: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Password"
                type="password"
                fullWidth
                value={newStudent.password}
                onChange={(e) => setNewStudent({ ...newStudent, password: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Semester"
                type="number"
                fullWidth
                value={newStudent.semester}
                onChange={(e) => setNewStudent({ ...newStudent, semester: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Branch"
                fullWidth
                value={newStudent.branch}
                onChange={(e) => setNewStudent({ ...newStudent, branch: e.target.value })}
              />
              <FormControl fullWidth margin="dense">
                <InputLabel>Gender</InputLabel>
                <Select
                  value={newStudent.gender}
                  onChange={(e) => setNewStudent({ ...newStudent, gender: e.target.value })}
                >
                  <MenuItem value="Male">Male</MenuItem>
                  <MenuItem value="Female">Female</MenuItem>
                  <MenuItem value="Other">Other</MenuItem>
                </Select>
              </FormControl>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => setNewStudent({ ...newStudent, profile: e.target.files[0] })}
              />
            </>
          ) : (
            <>
              <TextField
                autoFocus
                margin="dense"
                label="Register Number"
                fullWidth
                value={newStudent.registerNumber}
                onChange={(e) => setNewStudent({ ...newStudent, registerNumber: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Password"
                type="password"
                fullWidth
                value={newStudent.password}
                onChange={(e) => setNewStudent({ ...newStudent, password: e.target.value })}
              />
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsAddStudentModalOpen(false)}>Cancel</Button>
          <Button
            onClick={isLoggedIn ? handleAddStudent : () => handleLogin(newStudent.registerNumber, newStudent.password)}
            variant="contained"
          >
            {isLoggedIn ? "Add" : "Login"}
          </Button>
        </DialogActions>
      </Dialog>

      <Dialog open={isEditStudentModalOpen} onClose={() => setIsEditStudentModalOpen(false)}>
        <DialogTitle>Edit Student</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Full Name"
            fullWidth
            value={editingStudent?.fullName || ""}
            onChange={(e) => setEditingStudent({ ...editingStudent, fullName: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Email"
            type="email"
            fullWidth
            value={editingStudent?.email || ""}
            onChange={(e) => setEditingStudent({ ...editingStudent, email: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Phone Number"
            fullWidth
            value={editingStudent?.phoneNumber || ""}
            onChange={(e) => setEditingStudent({ ...editingStudent, phoneNumber: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Semester"
            type="number"
            fullWidth
            value={editingStudent?.semester || ""}
            onChange={(e) => setEditingStudent({ ...editingStudent, semester: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Branch"
            fullWidth
            value={editingStudent?.branch || ""}
            onChange={(e) => setEditingStudent({ ...editingStudent, branch: e.target.value })}
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>Gender</InputLabel>
            <Select
              value={editingStudent?.gender || ""}
              onChange={(e) => setEditingStudent({ ...editingStudent, gender: e.target.value })}
            >
              <MenuItem value="Male">Male</MenuItem>
              <MenuItem value="Female">Female</MenuItem>
              <MenuItem value="Other">Other</MenuItem>
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsEditStudentModalOpen(false)}>Cancel</Button>
          <Button onClick={handleUpdateStudent} variant="contained">
            Update
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        message={snackbar.message}
      />
    </motion.div>
  )
}

